<?php
use Zend\Form\Element;
use Zend\Form\Form;

$formElement = new Element\Text('performer');
$formElement
    ->setLabel('<i class="icon-film"></i> ' . $this->label)
    ->setAttributes(array(
        'id' => 'performer',
        'autocomplete' => 'off',
        'placeholder'  => '',
    ));

if ($performer) {
    $formElement->setAttributes(array(
        'value' => $performer->getName(),
    ));
}

?>

<?= $this->formRow($formElement); ?>

<input type="hidden" name="performer_id" <?php if ($performer) echo 'value="' . $performer->getId() . '"'; ?> id="performerId"/>

<script>
var performers = {};
var performerLabels = [];

require(['modernizr.min', 'bootstrap.min', 'datemask', 'underscore-min'], function() {

    $( "#performer" ).typeahead({
        source: function ( query, process ) {
            searchPerformers( query, process );
        }
        , updater: function (item) {
            //save the id value into the hidden field
            $( "#performerId" ).val( performers[ item ] );

            //return the string you want to go into the textbox (e.g. name)
            return item;
        }
        , matcher: function () { return true; }
    });

    var searchPerformers = _.debounce(function ( query, process ) {

        //the "process" argument is a callback, expecting an array of values (strings) to display

        //get the data to populate the typeahead (plus some)
        //from your api, wherever that may be
        $.get('/performer/search-json', { q: query }, function ( data ) {

            //reset these containers
            performers = {};
            performerLabels = [];

            //for each item returned, if the display name is already included
            //(e.g. multiple "John Smith" records) then add a unique value to the end
            //so that the user can tell them apart. Using underscore.js for a functional approach.
            _.each( data.performers, function( item, ix, list ){

                if ( _.contains( performers, item.label ) ){
                    item.label = item.label + ' #' + item.value;
                }

                //add the label to the display array
                performerLabels.push( item.label );

                //also store a mapping to get from label back to ID
                performers[ item.label ] = item.value;
            });

            //return the display array
            process( performerLabels );
        });
    }, 300);

});
</script>